InputEditPhoto.vue:


	<template>
		<div class="photoPreview">
			<div class="photoPreview__item photoPreview__item-addButton">
				<div class="photoPreview__wrap">
					<div :class="{'labelSpanDanger': isFormatPhotoError}">
						<slot name="label" />
					</div>
	<!--                <transition name="fade">-->
	<!--                    <div class="photoPreview__error" v-if="isFormatPhotoError">{{ errorMessage }}</div>-->
	<!--                </transition>-->
				</div>
				<input type="file"
					   name="images[]"
					   accept="image/*"
					   id="images"
					   @change="addImage"
					   multiple
					   hidden
				>
				<input type="text"
					   name="imgDataActions"
					   hidden
					   v-model="toJson"
				>
				<button
					:class="btnClasses"
					:style="btnStyles"
					type="button"
					@click="getElem"
					:disabled="loading"
				>
					<template v-if="!loading">{{ buttonTitle }}</template>
					<template v-else>
						<div class="lds-ellipsis">
							<div></div>
							<div></div>
							<div></div>
							<div></div>
						</div>
					</template>
				</button>
				<slot name="error-messages"/>
			</div>

			<transition-group name="fade">
				<div class="photoPreview__item" v-if="imageSrc.length > 0" v-for="(img, n) in imageSrc" :key="img">
					<div class="photoPreview__imgWrap" :style="{ 'background-image': 'url(' + img + ')' }">
						<div class="photoPreview__close _icon-close" @click="delImage($event, n, img)"></div>
					</div>
				</div>
			</transition-group>

		</div>
	</template>

	<script>
	export default {
		props: {
			buttonTitle: { type: String },
			imageCount: { type: Number },
			imageSize: { type: Number },
			btnStyles: { type: String, default: '' },
			btnClasses: { type: String, default: '' },
			errorMessage: { type: String },
			path: '',
			imageFromDb: { type: String },
		},
		data() {
			return {
				dataTransfer: new DataTransfer(),
				imageSrc: [],
				loading: false,
				isFormatPhotoError: false,
				dbImageObj: {},
				imgDataActions: {'delete': {}, 'update': {}},
			}
		},
		methods: {
			getElem() {
				document.getElementById('images').click();
			},
			addImage(e) {
				this.isFormatPhotoError = false;
				if (e.target.files) {
					this.loading = true;
					let [...files] = e.target.files;
					files.forEach((i) => {
						if (i.type.startsWith('image/') && this.imageSrc.length < this.imageCount && i.size < this.imageSizeBytes()) {
							let imgSrc = URL.createObjectURL(i);
							this.imageSrc.push(imgSrc);
							this.dataTransfer.items.add(i);
						} else {
							this.loading = false;
							this.isFormatPhotoError = true;
						}
					});
					e.target.files = this.dataTransfer.files;
					setTimeout(() => this.loading = false, 300)
				}
			},
			delImage(e, n, img) {
				// подготавливает json -> ( data() {this.imgDataActions} ) -> <input name="imgDataActions">
				this.imgDataActions['delete'][this.dbImageObj[img]] = '';
				delete this.imgDataActions['update'][this.dbImageObj[img]];
				// END подготавливает json -> this.imgDataActions -> <input name="imgDataActions">

				this.isFormatPhotoError = false;
				this.imageSrc = this.imageSrc.filter((el, idx) => idx !== n);
				this.dataTransfer.items.remove(n);
				let inputImg = document.getElementById('images');
				inputImg.files = this.dataTransfer.files;
			},
			imageSizeBytes() {
				return (this.imageSize * 1000);
			},
			renderLoadedImage() {
				let parsedData = JSON.parse(this.imageFromDb);
				if(parsedData) {
					parsedData.forEach((item) => {
						this.dbImageObj[this.path + item] = item;
						this.imgDataActions['update'][item] = '';
					});
					this.imageSrc = parsedData.map((item) => this.path + item);
				}
				// this.imgToUpdate = JSON.stringify(this.imgToUpdate);
			}
		},
		computed: {
			toJson() {
				return JSON.stringify(this.imgDataActions);
			}
		},
		watch: {
			// imageSrc: {
			//     handler(val, oldVal) {
			//         setTimeout(() => this.loading = false, 300)
			//         // this.loading = false;
			//     },
			//     deep: true
			// },
		},
		mounted() {
			this.renderLoadedImage();
		}
	}
	</script>

	<style lang="scss">
	._icon-close:before {
		content: "\e915";
	}

	// photo preview
	.photoPreview {
		display: grid;
		grid-template-columns: repeat(4, 1fr);
		gap: 8px;
		padding: 4px 0 12px;
		border-radius: 3px;
		margin-top: 4px;

		&__wrap {
			display: flex;
			flex-direction: column;
		}

		&__error {
			background: #dc3545;
			color: #fff;
			margin-bottom: 12px;
			font-weight: 100;
			border-radius: 0.25rem;
			padding: 0 6px;
			font-size: 14px;
		}

		@media screen and (max-width: 780px) {
			grid-template-columns: repeat(3, 1fr);
		}
		@media screen and (max-width: 540px) {
			grid-template-columns: repeat(2, 1fr);
		}
		@media screen and (max-width: 380px) {
			grid-template-columns: repeat(1, 1fr);
		}

		input {
			border: none !important;
			padding-top: 2px !important;
		}

		&__imgWrap {
			position: relative;
			border: 1px solid #ced4da;
			border-radius: 0.25rem;
			width: 100%;
			background-position: center center;
			background-size: cover;

			&:after {
				content: '';
				display: block;
				padding-top: 100%;
			}

		}

		&__item {
			display: flex;
			justify-content: flex-start;

			span {
				font-weight: 400;
				color: #6c757d;
			}
		}

		&__item-addButton {
			grid-column: 1/-1;
			display: flex;
			flex-direction: column;
			margin-bottom: 5px;

			label {
				margin-bottom: 6px;
				text-align: left;
			}
		}

		&__close {
			position: absolute;
			top: 0;
			right: 0;
			//height: 100%;
			display: flex;
			justify-content: center;
			color: #E7E8F2;
			padding: 4px;

			&._icon-close:before {
				display: flex;
				justify-content: center;
				align-items: center;
				background: rgba(0, 0, 0, 0.6);
				color: rgba(255, 255, 255, 0.6);
				padding: 4px;
				font-size: 14px;
				width: 100%;
				border-radius: 3px;
				transition: 0.3s;
			}

			&:hover {
				cursor: pointer;

				&._icon-close:before {
					background: rgba(0, 0, 0, 1);
					color: rgba(255, 255, 255, 1);
				}
			}
		}

		small {
			font-weight: 200;
			//background: #df1212;
			color: #df1212;
			font-weight: 400;
			margin-top: 2px;
			border-radius: 3px;
			padding: 0 2px 2px;
			text-align: left;
		}
	}

	// END photo preview

	// loader
	.lds-ellipsis {
		display: inline-block;
		position: relative;
		width: 80px;
		height: 10px;

		div {
			position: absolute;
			top: 3px;
			width: 6px;
			height: 6px;
			border-radius: 50%;
			background: #fff;
			animation-timing-function: cubic-bezier(0, 1, 1, 0);
		}

		div:nth-child(1) {
			left: 8px;
			animation: lds-ellipsis1 0.6s infinite;
		}

		div:nth-child(2) {
			left: 8px;
			animation: lds-ellipsis2 0.6s infinite;
		}

		div:nth-child(3) {
			left: 32px;
			animation: lds-ellipsis2 0.6s infinite;
		}

		div:nth-child(4) {
			left: 56px;
			animation: lds-ellipsis3 0.6s infinite;
		}
	}

	@keyframes lds-ellipsis1 {
		0% {
			transform: scale(0);
		}
		100% {
			transform: scale(1);
		}
	}

	@keyframes lds-ellipsis3 {
		0% {
			transform: scale(1);
		}
		100% {
			transform: scale(0);
		}
	}

	@keyframes lds-ellipsis2 {
		0% {
			transform: translate(0, 0);
		}
		100% {
			transform: translate(24px, 0);
		}
	}

	// END loader
	</style>
	
	
BLADE:

	<input-edit-photo
		image-count="{{\App\Enums\ImgProductLimits::ImageCount->value}}"
		image-size="{{\App\Enums\ImgProductLimits::ImageSize->value}}"
		button-title="{{ __('input-photo.upload') }}"
		btn-classes="btn btn-info"
		error-message="{{ __('input-photo.error') }}"
		image-from-db="{{ json_encode($product->images) }}"
		path="{{ asset('') }}"
	>
		<template v-slot:label>
			<label for="images">
				{!! __('input-photo.title',['max' => \App\Enums\ImgProductLimits::ImageCount->value, 'size' => \App\Enums\ImgProductLimits::ImageSize->value/1024]) !!}
			</label>
		</template>
		<template v-slot:error-messages>
			@error('images')<small>{{ $message }}</small>@enderror
			@if($errors->get('images.*'))
				<small>{{ $errors->first('images.*') }}</small>
			@endif
		</template>
	</input-edit-photo>
