1. Регистрация на https://dashboard.pusher.com/apps/2038567/getting_started для получения ключей:

    PUSHER_APP_ID
    PUSHER_APP_KEY
    PUSHER_APP_SECRET



2. php artisan install:broadcasting --pusher



3. php artisan make:event MyEvent :

    <?php

        namespace App\Events;

        use Illuminate\Broadcasting\Channel;
        use Illuminate\Broadcasting\InteractsWithSockets;
        use Illuminate\Broadcasting\PresenceChannel;
        use Illuminate\Broadcasting\PrivateChannel;
        use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
        use Illuminate\Contracts\Broadcasting\ShouldBroadcastNow;
        use Illuminate\Foundation\Events\Dispatchable;
        use Illuminate\Queue\SerializesModels;

        class MyEvent implements ShouldBroadcastNow
        {
            use Dispatchable, InteractsWithSockets, SerializesModels;
            
            public function __construct(public $data)
            {
                //
            }

            public function broadcastOn()
            {
                return [
                    new Channel('my-channel'),
                ];
            }
        }


    PS: class MyEvent implements ShouldBroadcast - требует запуска - php artisan queue:work



4. resources/js/components/custom/broad/MyBroad.vue :

    <template>
        <div class="text-center mt-4">{{ orderStatus.message }}</div>
    </template>

    <script setup lang="ts">

        import { ref, onMounted, onUnmounted } from 'vue';
        import { useEchoPublic } from '@laravel/echo-vue';

        const orderStatus = ref();

        const { listen, leaveChannel } = useEchoPublic(
            `my-channel`,
            'MyEvent',
            (e) => {
                orderStatus.value = e.data;
            }
        );

        onMounted(() => {
            listen();
        });

        onUnmounted(() => {
            leaveChannel();
        });

    </script><style scoped lang="scss"></style>



5. resources/js/vue.js :

    // import './bootstrap';

    import { createApp } from 'vue';

    import { configureEcho } from "@laravel/echo-vue";

    configureEcho({
        broadcaster: "pusher",
        // key: import.meta.env.VITE_REVERB_APP_KEY,
        // wsHost: import.meta.env.VITE_REVERB_HOST,
        // wsPort: import.meta.env.VITE_REVERB_PORT,
        // wssPort: import.meta.env.VITE_REVERB_PORT,
        // forceTLS: (import.meta.env.VITE_REVERB_SCHEME ?? 'https') === 'https',
        // enabledTransports: ['ws', 'wss'],
    });

    const vue = createApp({
        data() {
            return {
                test: 'Vue is working(test variable)!',
                testBool: true,
                localeDropdownState: false,
                userMenuIsOpen: false,
            };
        },
        // methods: {
        //     //
        // },
        beforeMount() {
            document.addEventListener("click", (e) => {
                if(!e.target.closest('#localeDropdown')) this.localeDropdownState = false;
                if(!e.target.closest('#userMenuNav')) this.userMenuIsOpen = false;
            })
            // window.addEventListener("resize", () => {
            //     //
            // })
        },
        // mounted() {
        //     //
        // },
        unmounted() {
            document.removeEventListener('click');
            // window.removeEventListener('resize');
        }
    });

    import MyBroad from './components/custom/broad/MyBroad.vue';

    vue.component('my-broad', MyBroad);

    vue.mount('#app');



6. Routes :

    Route::get('/auth/test', [\App\Http\Controllers\Supervisor\PageController::class, 'test'])->name('auth.test');

    Route::get('/broad', [\App\Http\Controllers\Supervisor\PageController::class, 'broad'])->name('auth.broad')



7. PageController.php :

    use App\Events\MyEvent;


    public function test()
    {
        return view('authorized.test.index');
    }

    public function broad()
    {
        $phrase = fake()->catchPhrase();
        $data = ['message' => $phrase, 'status' => 'ok'];
        MyEvent::dispatch($data);
        return view('authorized.broad.index');
    }




8. test.blade.php :

    <div class="text-2xl dark:text-gray-300">
        <p class="text-center">{{ __('Test(auth)') }}</p>
        <p class="text-sm">
            <my-broad></my-broad>
        </p>
    </div>





    
