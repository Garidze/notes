1. Настройка:

	php artisan queue:table ;
	php artisan migrate ;

	
	
2. .env: 

	QUEUE_CONNECTION=database ;
	
	
3. Создание Job:

	php artisan make:job ForgotPasswordEmailJob
	
	для корректности адреса проверить корректность ссылки .env: APP_URL=https://table-shop.local
	
	
4. app/Jobs/ForgotPasswordJob.php :

	<?php

		namespace App\Jobs;

		use Illuminate\Bus\Queueable;
		use Illuminate\Contracts\Queue\ShouldQueue;
		use Illuminate\Foundation\Bus\Dispatchable;
		use Illuminate\Queue\InteractsWithQueue;
		use Illuminate\Queue\SerializesModels;
		use Illuminate\Support\Facades\Password;

		class ForgotPasswordEmailJob implements ShouldQueue
		{
			use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

			protected $requestEmail;

			/**
			 * Create a new job instance.
			 */
			public function __construct($requestEmail)
			{
				$this->requestEmail = $requestEmail;
			}

			/**
			 * Execute the job.
			 */
			public function handle(): void
			{
				Password::sendResetLink($this->requestEmail);
			}
		}
	
	
5. app/Http/Controllers/Auth/PasswordResetLinkController.php:

	<?php

		namespace App\Http\Controllers\Auth;

		use App\Http\Controllers\Controller;
		use App\Jobs\ForgotPasswordEmailJob;
		use Illuminate\Http\RedirectResponse;
		use Illuminate\Http\Request;
		use Illuminate\Support\Facades\Password;
		use Illuminate\View\View;

		class PasswordResetLinkController extends Controller
		{
			/**
			 * Display the password reset link request view.
			 */
			public function create(): View
			{
				return view('auth.forgot-password');
			}

			/**
			 * Handle an incoming password reset link request.
			 *
			 * @throws \Illuminate\Validation\ValidationException
			 */
			public function store(Request $request): RedirectResponse
			{
				$request->validate([
					'email' => ['required', 'email', 'exists:users,email'],
				]);

				dispatch(new ForgotPasswordEmailJob($request->only('email')));  // Запуск в терминале - php artisan queue:work
				
				/*OR*/
				/*ForgotPasswordEmailJob::dispatch($request->only('email'));*/
				/*END OR*/

				return redirect()->back()->with('status', __('passwords.sent'));


				/*ИЗ КОРОБКИ*/

				// We will send the password reset link to this user. Once we have attempted
				// to send the link, we will examine the response then see the message we
				// need to show to the user. Finally, we'll send out a proper response.

				// проверяет, есть ли указанный e-mail в БД, и если есть
				// отправляет письмо на указанный адрес и возвращает - "passwords.sent"
				/*$status = Password::sendResetLink(
					$request->only('email')
				);*/

				// Password::RESET_LINK_SENT возвращает - "passwords.sent"
				/*return $status == Password::RESET_LINK_SENT
							? back()->with('status', __('passwords.sent'))
							: back()->withInput($request->only('email'))
									->withErrors(['email' => __('passwords.user')]);*/

				/*END ИЗ КОРОБКИ*/


			}

		}



6. Положить два файла(ru.json, en.json) из папки с заметками в директорию lang проекта(публикация папки: php artisan lang:publish) для руссификации писем, высылаемых на почту;

		
		
7. Очереди записываются в DB.

	# Запуск очередей в локальной разработке(в консоли):
	
		 php artisan queue:work ;
		 
	
	# Запуск на сервере по руководству:
	
		- https://laravel.com/docs/11.x/queues#supervisor-configuration ;
		
		- https://laravel.com/docs/10.x/queues#supervisor-configuration ;
		
		
		
PS. Дополнительные комманды:

	- php artisan queue:failed ; // просмотр не выполнынный Jobs
	
	- php artisan queue:retry all ; // перезапуск
		
	
