

1. Подключение файла с API-маршрутами(api_v1.php) - bootstrap/app.php:

    <?php

        use App\Http\Middleware\HandleAppearance;
        use App\Http\Middleware\HandleInertiaRequests;
        use Illuminate\Foundation\Application;
        use Illuminate\Foundation\Configuration\Exceptions;
        use Illuminate\Foundation\Configuration\Middleware;
        use Illuminate\Http\Middleware\AddLinkHeadersForPreloadedAssets;
        use Illuminate\Support\Facades\Route;
        use App\Http\Middleware\LocaleMiddleware;

        return Application::configure(basePath: dirname(__DIR__))
            ->withRouting(
                web: __DIR__.'/../routes/web.php',
                commands: __DIR__.'/../routes/console.php',
                health: '/up',
                then: function () {
                    /*Route::middleware('throttle:api')->prefix('api')->group(base_path('routes/api.php'));*/
                    /*Route::middleware('throttle:api_v1')->prefix('api/v1')->group(base_path('routes/api_v1.php'));*/
                    Route::prefix('api/v1')->group(base_path('routes/api_v1.php'));
                },
            )
            ->withMiddleware(function (Middleware $middleware) {
                $middleware->encryptCookies(except: ['appearance', 'sidebar_state']);

                $middleware->web(append: [
                    HandleAppearance::class,
                    LocaleMiddleware::class,
                    HandleInertiaRequests::class,
                    AddLinkHeadersForPreloadedAssets::class,
                ]);
                $middleware->alias([
                    'locale' => \App\Http\Middleware\LocaleMiddleware::class,
                ]);
            })

            ->withExceptions(function (Exceptions $exceptions) {
                //
            })->create();



2. routes/api_v1.php:

    <?php

        use Illuminate\Support\Facades\Route;

            Route::get('/', [\App\Http\Controllers\Api\V1\ApiController::class, 'index'])->name('api.v1.index');
            Route::get('/item/{id}', [\App\Http\Controllers\Api\V1\ApiController::class, 'item'])->name('api.v1.item');



3. Создание ресурса и настройка полей, которые нужно получить - app\Http\Resources\CityResource.php:

    - php artisan make:resource CityResource ;

    <?php

        namespace App\Http\Resources;

        use Illuminate\Http\Request;
        use Illuminate\Http\Resources\Json\JsonResource;

        class CityResource extends JsonResource
        {
            /**
            * Transform the resource into an array.
            *
            * @return array<string, mixed>
            */

            public function toArray(Request $request): array
            {
        //        return parent::toArray($request);

                return [
                    'Id' => $this->ID,
                    'Name' => $this->Name,
                    'District' => $this->District,
                ];


            }
        }



4. Контроллер - app/Http/Controllers/Api/V1/ApiController.php:

    - php artisan make:controller Api/V1/ApiController ;

    <?php

        namespace App\Http\Controllers\Api\V1;

        use App\Http\Controllers\Controller;
        use App\Http\Resources\CityResource;
        use App\Http\Resources\CountryResource;
        use App\Models\City;
        use App\Models\Country;
        use Illuminate\Http\Request;

        class ApiController extends Controller
        {
            public function index()
            {
        //        return CityResource::collection(City::where('ID', '<=', 10)->paginate(5));
        //        return CityResource::collection(City::all());
        //        return new CountryResource(Country::first());

                return CountryResource::collection(Country::orderBy('Population', 'asc')->get());
            }

            public function item($id)
            {
                return new CityResource(City::findOrFail($id));
            }

        }

    МАРШРУТЫ API:

        - http://127.0.0.1:8000/api/v1 ;
        - http://127.0.0.1:8000/api/v1/item/4 ;



LINKS:
    https://laravel.su/docs/12.x/eloquent-resources;
    https://laravel.com/docs/12.x/eloquent-resources.



COMMANDS:

    - php artisan make:resource CityResource ;

    - php artisan make:resource CityCollection
                        or
    - php artisan make:resource City --collection;



НАСТРОЙКА THROTTLE:

    app/Providers/AppServiceProvider.php:

        <?php

            namespace App\Providers;

            use Illuminate\Support\ServiceProvider;
            use Illuminate\Cache\RateLimiting\Limit;
            use Illuminate\Http\Request;
            use Illuminate\Support\Facades\RateLimiter;
            use Illuminate\Http\Resources\Json\JsonResource;

            class AppServiceProvider extends ServiceProvider
            {
                /**
                * Register any application services.
                */
                public function register(): void
                {
                    //
                }

                /**
                * Bootstrap any application services.
                */
                public function boot(): void
                {
                    JsonResource::withoutWrapping(); // ОТКЛЮЧЕНИЕ data-wrapping В CityResource::collection

                    RateLimiter::for('api', function (Request $request) {
                        return Limit::perMinute(2)->by($request->user()?->id ?: $request->ip());
                    });

                    RateLimiter::for('api_v1', function (Request $request) {
                        /*return Limit::perMinute(5)->by($request->user()?->id ?: $request->ip());*/
                        return Limit::perMinute(3)->response(function (Request $request, array $headers) {
                            return response('Rate limit', 429, $headers);
                        });
                    });

                    RateLimiter::for('welcome', function (Request $request) {
                        localeSetter($request);
                        return Limit::perMinute(3)->by($request->user()?->id ?: $request->ip());
                    });
                }
            }









 
